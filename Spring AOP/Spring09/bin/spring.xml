<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">
		
	<!-- 核心业务类 -->
	<bean id="bookService" class="com.hellojava.business.impl.BookService"></bean>
	<!-- 切面(附加业务的模块化) 需要添加到核心业务的 -->
	<bean id="task" class="com.hellojava.task.impl.Task"></bean>
	<!-- 通知(环绕通知(目标的之前和之后)) 指在核心业务的前后织入切面 -->
	<bean id="interceptor" class="com.hellojava.advice.MyMethodInterceptor">
		<property name="task" ref="task"></property>
	</bean>
	<!-- 通知(前置通知) 指在核心业务的之前织入切面 -->
	<bean id="before" class="com.hellojava.advice.MyBeforeAdvice">
		<property name="task" ref="task"></property>
	</bean>
	
	<!-- 通知(后置通知) -->
	<bean id="after" class="com.hellojava.advice.MyMethodAfterAdvice">
		<property name="task" ref="task"></property>
	</bean>
	<!-- 配置拎一个核心业务 -->
	<bean id="bookService1" class="com.hellojava.business.impl.BookService1"></bean>

	<!-- 生产代理对象 -->
	<bean id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<!-- 代理的目标是BookService1 -->
		<property name="target" ref="bookService1"></property>
		<!-- 织入的通知 -->
		<property name="interceptorNames">
			<array>
				<value>before</value>
				<value>after</value>
			</array>
		</property>
		<!-- 代理的目标的接口 -->
		<property name="proxyInterfaces">
			<value>com.hellojava.business.IBookService</value>
		</property>
	</bean>

</beans>
